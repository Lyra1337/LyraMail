@page "/"
@namespace Lyralabs.TempMailServer.Web.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    this.Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="apple-touch-icon" sizes="180x180" href="~/icons/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="~/icons/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="~/icons/favicon-16x16.png">
    <link rel="manifest" href="~/site.webmanifest">
    <title>LyraMail.de</title>
    <base href="~/" />
    <link href="~/lib/bootswatch/darkly/bootstrap.min.css" rel="stylesheet" />
    <link href="~/lib/fontawesome/css/all.min.css" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" />
    <link href="~/css/dashboard.css" rel="stylesheet" />
    <link href="Lyralabs.TempMailServer.Web.styles.css" rel="stylesheet" />
</head>
<body data-color="grey" class="flat">
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <script src="~/lib/jquery/jquery.slim.min.js"></script>
    <script src="~/lib/bootstrap/js/bootstrap.bundle.min.js"></script>

    <script src="~/js/app.js"></script>

    <script>
        @* From https://stackoverflow.com/a/61196613/1018200 *@
        // Wait until a 'reload' button appears
        new MutationObserver((mutations, observer) => {
            if (document.querySelector('#components-reconnect-modal h5 a')) {
                // Now every 1 second, see if the server appears to be back, and if so, reload
                async function attemptReload() {
                    await fetch(''); // Check the server really is back
                    location.reload();
                }

                observer.disconnect();
                attemptReload();
                setInterval(attemptReload, 1000);
            }
        }).observe(document.body, { childList: true, subtree: true });
    </script>
</body>
</html>
